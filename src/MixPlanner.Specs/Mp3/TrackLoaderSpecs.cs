using System;
using Castle.Windsor;
using Machine.Specifications;
using MixPlanner.Configuration;
using MixPlanner.DomainModel;
using MixPlanner.Mp3;

namespace MixPlanner.Specs.Mp3
{
    // Full end-to-end integration tests for loading various file types.
    [Subject(typeof(TrackLoader))]
    public class TrackLoaderSpecs
    {
        public class when_reading_tags_from_a_track_tagged_by_audacity : FixtureBase
        {
            Because of = () => Track = Loader.LoadAsync("audacity.mp3").Result;

            It should_get_the_correct_key =
                () => Track.OriginalKey.ShouldEqual(HarmonicKey.Key7A);

            It should_get_the_correct_artist =
                () => Track.Artist.ShouldEqual("Hardwell");

            It should_get_the_correct_title =
                () => Track.Title.ShouldEqual("Three Triangles (Original Club Mix)");

            It should_get_the_correct_bpm =
                () => Track.OriginalBpm.ShouldEqual(128);

            It should_get_the_correct_publisher =
                () => Track.Label.ShouldEqual("Toolroom Records");

            It should_get_the_correct_year =
                () => Track.Year.ShouldEqual("2012");

            It should_get_the_correct_genre =
                () => Track.Genre.ShouldEqual("Progressive House");

            It should_get_the_filename = 
                () => Track.Filename.ShouldEndWith("audacity.mp3");

            It should_not_return_any_images =
                () => Track.Images.ShouldBeNull();
        }

        public class when_reading_tags_from_a_track_tagged_by_mixed_in_key_4 : FixtureBase
        {
            Because of = () => Track = Loader.LoadAsync("mixed_in_key_4.mp3").Result;

            It should_get_the_correct_key =
                () => Track.OriginalKey.ShouldEqual(HarmonicKey.Key7A);

            It should_get_the_correct_artist =
                () => Track.Artist.ShouldEqual("Hardwell");

            It should_get_the_correct_title =
                () => Track.Title.ShouldEqual("Three Triangles (Original Club Mix)");

            It should_get_the_correct_bpm =
                () => Track.OriginalBpm.ShouldEqual(128);

            It should_get_the_correct_publisher =
                () => Track.Label.ShouldEqual("Toolroom Records");

            It should_get_the_correct_year =
                () => Track.Year.ShouldEqual("2012");

            It should_get_the_correct_genre =
                () => Track.Genre.ShouldEqual("Progressive House");

            It should_get_the_filename =
                () => Track.Filename.ShouldEndWith("mixed_in_key_4.mp3");

            It should_not_return_any_images =
                () => Track.Images.ShouldBeNull();
        }

        public class when_reading_tags_from_a_full_track_tagged_by_mixed_in_key_4 : FixtureBase
        {
            Because of = () => 
                Track = Loader.LoadAsync("7A - 128 - 3505135_Three Triangles_Original Club Mix.mp3").Result;

            It should_get_the_correct_key =
                () => Track.OriginalKey.ShouldEqual(HarmonicKey.Key7A);

            It should_get_the_correct_artist =
                () => Track.Artist.ShouldEqual("Hardwell");

            It should_get_the_correct_title =
                () => Track.Title.ShouldEqual("Three Triangles (Original Club Mix)");

            It should_get_the_correct_bpm =
                () => Track.OriginalBpm.ShouldEqual(128);

            It should_get_the_correct_publisher =
                () => Track.Label.ShouldEqual("Toolroom Records");

            It should_get_the_correct_year =
                () => Track.Year.ShouldEqual("2012");

            It should_get_the_correct_genre =
                () => Track.Genre.ShouldEqual("Progressive House");

            It should_get_the_filename =
                () => Track.Filename.ShouldEndWith("7A - 128 - 3505135_Three Triangles_Original Club Mix.mp3");

            It should_get_the_images =
                () => Track.Images.ShouldNotBeNull();
        }

        // This was generated by an old version of the Mixed in Key algorithm,
        // if you run the track again now it reports 1B. (No wonder I could
        // never mix it 2 years ago)
        public class when_reading_tags_from_a_full_track_tagged_with_two_keys_by_mixed_in_key_4 : FixtureBase
        {
            Because of = () => 
                Track = Loader.LoadAsync("1A or 11A - 132 - 1279464_Barra_Extended Mix.mp3").Result;

            It should_get_the_correct_key =
                () => Track.OriginalKey.ShouldEqual(HarmonicKey.Key1A);

            It should_get_the_correct_artist =
                () => Track.Artist.ShouldEqual("Cosmic Gate");

            It should_get_the_correct_title =
                () => Track.Title.ShouldEqual("Barra - Extended Mix");

            It should_get_the_correct_bpm =
                () => Track.OriginalBpm.ShouldEqual(132);

            It should_get_the_correct_publisher =
                () => Track.Label.ShouldEqual("Black Hole Recordings");

            It should_get_the_correct_year =
                () => Track.Year.ShouldEqual("2010");

            It should_get_the_correct_genre =
                () => Track.Genre.ShouldEqual("Trance");

            It should_get_the_filename =
                () => Track.Filename.ShouldEndWith("1A or 11A - 132 - 1279464_Barra_Extended Mix.mp3");

            It should_get_the_images =
                () => Track.Images.ShouldNotBeNull();
        }

        public class when_reading_tags_from_a_track_with_only_id3v1_tag : FixtureBase
        {
            Because of = () => Track = Loader.LoadAsync("id3v1_only.mp3").Result;

            It should_get_the_correct_key =
                () => Track.OriginalKey.ShouldEqual(HarmonicKey.Unknown);

            It should_get_the_correct_artist =
                () => Track.Artist.ShouldEqual("Aphex Twin");

            It should_get_the_correct_title =
                () => Track.Title.ShouldEqual("Bit");

            It should_get_the_correct_bpm =
                () => Track.OriginalBpm.ShouldEqual(Double.NaN);

            It should_get_the_correct_publisher =
                () => Track.Label.ShouldEqual("");

            It should_get_the_correct_year =
                () => Track.Year.ShouldEqual("1995");

            It should_get_the_correct_genre =
                () => Track.Genre.ShouldEqual("Electronic");

            It should_get_the_filename =
                () => Track.Filename.ShouldEndWith("id3v1_only.mp3");

            It should_not_return_any_images =
                () => Track.Images.ShouldBeNull();
        }

        public class when_reading_tags_from_a_track_with_no_initial_key_or_bpm : FixtureBase
        {
            Because of = () => Track = Loader.LoadAsync("id3v2_no_key_or_bpm.mp3").Result;

            It should_get_the_correct_key =
                () => Track.OriginalKey.ShouldEqual(HarmonicKey.Unknown);

            It should_get_the_correct_artist =
                () => Track.Artist.ShouldEqual("Method Man");

            It should_get_the_correct_title =
                () => Track.Title.ShouldEqual("Say (Call Out)");

            It should_get_the_correct_bpm =
                () => Track.OriginalBpm.ShouldEqual(Double.NaN);

            It should_get_the_correct_publisher =
                () => Track.Label.ShouldEqual("Def Jam Records");

            It should_get_the_correct_year =
                () => Track.Year.ShouldEqual("2006");

            It should_get_the_correct_genre =
                () => Track.Genre.ShouldEqual("Rap");

            It should_get_the_filename =
                () => Track.Filename.ShouldEndWith("id3v2_no_key_or_bpm.mp3");

            It should_not_return_any_images =
                () => Track.Images.ShouldBeNull();
        }

        public abstract class FixtureBase
        {
            Establish context =
                () =>
                    {
                        container = new WindsorContainer();
                        container.Install(new IocRegistrations());
                        container.Resolve<IConfigProvider>().InitializeAsync().Wait();
                        Loader = container.Resolve<ITrackLoader>();
                    };

            Cleanup after = () => container.Dispose();

            It should_return_a_track = () => Track.ShouldNotBeNull();

            protected static ITrackLoader Loader;
            protected static Track Track;
            static IWindsorContainer container;
        }
    }
}